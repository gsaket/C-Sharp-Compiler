compilation_unit -> using_directives_opt namespace_member_declarations  ;
namespace_member_declarations -> namespace_member_declaration  ;
namespace_member_declaration -> namespace_declaration  ;
namespace_declaration -> NAMESPACE qualified_identifier namespace_body comma_opt  ;
comma_opt -> eps  ;
eps ->   ;
namespace_body -> '{' using_directives_opt namespace_member_declarations_opt '}'  ;
namespace_member_declarations_opt -> namespace_member_declarations  ;
namespace_member_declarations -> namespace_member_declaration  ;
namespace_member_declaration -> type_declaration  ;
type_declaration -> class_declaration  ;
class_declaration -> modifiers_opt CLASS IDENTIFIER class_base_opt class_body comma_opt  ;
comma_opt -> eps  ;
eps ->   ;
class_body -> '{' class_member_declarations_opt '}'  ;
class_member_declarations_opt -> class_member_declarations  ;
class_member_declarations -> class_member_declaration  ;
class_member_declaration -> method_declaration  ;
method_declaration -> method_header method_body  ;
method_body -> block  ;
block -> '{' statement_list_opt '}'  ;
statement_list_opt -> statement_list  ;
statement_list -> statement_list statement  ;
statement -> embedded_statement  ;
embedded_statement -> expression_statement  ;
expression_statement -> statement_expression ';'  ;
statement_expression -> invocation_expression  ;
invocation_expression -> qualified_identifier '(' argument_list_opt ')'  ;
argument_list_opt -> eps  ;
eps ->   ;
qualified_identifier -> qualifier IDENTIFIER  ;
qualifier -> IDENTIFIER '.'  ;
statement_list -> statement_list statement  ;
statement -> embedded_statement  ;
embedded_statement -> iteration_statement  ;
iteration_statement -> for_statement  ;
for_statement -> FOR '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' embedded_statement  ;
embedded_statement -> block  ;
block -> '{' statement_list_opt '}'  ;
statement_list_opt -> statement_list  ;
statement_list -> statement  ;
statement -> embedded_statement  ;
embedded_statement -> expression_statement  ;
expression_statement -> statement_expression ';'  ;
statement_expression -> invocation_expression  ;
invocation_expression -> qualified_identifier '(' argument_list_opt ')'  ;
argument_list_opt -> argument_list  ;
argument_list -> argument_list COMMA argument  ;
argument -> expression  ;
expression -> conditional_expression  ;
conditional_expression -> conditional_or_expression  ;
conditional_or_expression -> conditional_and_expression  ;
conditional_and_expression -> inclusive_or_expression  ;
inclusive_or_expression -> exclusive_or_expression  ;
exclusive_or_expression -> and_expression  ;
and_expression -> equality_expression  ;
equality_expression -> relational_expression  ;
relational_expression -> shift_expression  ;
shift_expression -> additive_expression  ;
additive_expression -> multiplicative_expression  ;
multiplicative_expression -> unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> primary_expression  ;
primary_expression -> primary_expression_no_parenthesis  ;
primary_expression_no_parenthesis -> element_access  ;
element_access -> qualified_identifier LEFT_BRACKET expression_list RIGHT_BRACKET  ;
expression_list -> expression  ;
expression -> conditional_expression  ;
conditional_expression -> conditional_or_expression  ;
conditional_or_expression -> conditional_and_expression  ;
conditional_and_expression -> inclusive_or_expression  ;
inclusive_or_expression -> exclusive_or_expression  ;
exclusive_or_expression -> and_expression  ;
and_expression -> equality_expression  ;
equality_expression -> relational_expression  ;
relational_expression -> shift_expression  ;
shift_expression -> additive_expression  ;
additive_expression -> multiplicative_expression  ;
multiplicative_expression -> unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> qualified_identifier  ;
qualified_identifier -> IDENTIFIER  ;
qualified_identifier -> IDENTIFIER  ;
argument_list -> argument_list COMMA argument  ;
argument -> expression  ;
expression -> conditional_expression  ;
conditional_expression -> conditional_or_expression  ;
conditional_or_expression -> conditional_and_expression  ;
conditional_and_expression -> inclusive_or_expression  ;
inclusive_or_expression -> exclusive_or_expression  ;
exclusive_or_expression -> and_expression  ;
and_expression -> equality_expression  ;
equality_expression -> relational_expression  ;
relational_expression -> shift_expression  ;
shift_expression -> additive_expression  ;
additive_expression -> multiplicative_expression  ;
multiplicative_expression -> unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> qualified_identifier  ;
qualified_identifier -> IDENTIFIER  ;
argument_list -> argument  ;
argument -> expression  ;
expression -> conditional_expression  ;
conditional_expression -> conditional_or_expression  ;
conditional_or_expression -> conditional_and_expression  ;
conditional_and_expression -> inclusive_or_expression  ;
inclusive_or_expression -> exclusive_or_expression  ;
exclusive_or_expression -> and_expression  ;
and_expression -> equality_expression  ;
equality_expression -> relational_expression  ;
relational_expression -> shift_expression  ;
shift_expression -> additive_expression  ;
additive_expression -> multiplicative_expression  ;
multiplicative_expression -> unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> primary_expression  ;
primary_expression -> primary_expression_no_parenthesis  ;
primary_expression_no_parenthesis -> literal  ;
literal -> STRING_LITERAL  ;
qualified_identifier -> qualifier IDENTIFIER  ;
qualifier -> IDENTIFIER '.'  ;
for_iterator_opt -> for_iterator  ;
for_iterator -> statement_expression_list  ;
statement_expression_list -> statement_expression  ;
statement_expression -> pre_increment_expression  ;
pre_increment_expression -> PLUSPLUS unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> qualified_identifier  ;
qualified_identifier -> IDENTIFIER  ;
for_condition_opt -> for_condition  ;
for_condition -> boolean_expression  ;
boolean_expression -> expression  ;
expression -> conditional_expression  ;
conditional_expression -> conditional_or_expression  ;
conditional_or_expression -> conditional_and_expression  ;
conditional_and_expression -> inclusive_or_expression  ;
inclusive_or_expression -> exclusive_or_expression  ;
exclusive_or_expression -> and_expression  ;
and_expression -> equality_expression  ;
equality_expression -> relational_expression  ;
relational_expression -> relational_expression '<' shift_expression  ;
shift_expression -> additive_expression  ;
additive_expression -> multiplicative_expression  ;
multiplicative_expression -> unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> primary_expression  ;
primary_expression -> primary_expression_no_parenthesis  ;
primary_expression_no_parenthesis -> literal  ;
literal -> INTEGER_LITERAL  ;
relational_expression -> shift_expression  ;
shift_expression -> additive_expression  ;
additive_expression -> multiplicative_expression  ;
multiplicative_expression -> unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> qualified_identifier  ;
qualified_identifier -> IDENTIFIER  ;
for_initializer_opt -> for_initializer  ;
for_initializer -> statement_expression_list  ;
statement_expression_list -> statement_expression  ;
statement_expression -> assignment  ;
assignment -> unary_expression assignment_operator expression  ;
expression -> conditional_expression  ;
conditional_expression -> conditional_or_expression  ;
conditional_or_expression -> conditional_and_expression  ;
conditional_and_expression -> inclusive_or_expression  ;
inclusive_or_expression -> exclusive_or_expression  ;
exclusive_or_expression -> and_expression  ;
and_expression -> equality_expression  ;
equality_expression -> relational_expression  ;
relational_expression -> shift_expression  ;
shift_expression -> additive_expression  ;
additive_expression -> multiplicative_expression  ;
multiplicative_expression -> unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> primary_expression  ;
primary_expression -> primary_expression_no_parenthesis  ;
primary_expression_no_parenthesis -> literal  ;
literal -> INTEGER_LITERAL  ;
assignment_operator -> '='  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> qualified_identifier  ;
qualified_identifier -> IDENTIFIER  ;
statement_list -> statement_list statement  ;
statement -> embedded_statement  ;
embedded_statement -> iteration_statement  ;
iteration_statement -> for_statement  ;
for_statement -> FOR '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' embedded_statement  ;
embedded_statement -> block  ;
block -> '{' statement_list_opt '}'  ;
statement_list_opt -> statement_list  ;
statement_list -> statement  ;
statement -> embedded_statement  ;
embedded_statement -> expression_statement  ;
expression_statement -> statement_expression ';'  ;
statement_expression -> assignment  ;
assignment -> unary_expression assignment_operator expression  ;
expression -> conditional_expression  ;
conditional_expression -> conditional_or_expression  ;
conditional_or_expression -> conditional_and_expression  ;
conditional_and_expression -> inclusive_or_expression  ;
inclusive_or_expression -> exclusive_or_expression  ;
exclusive_or_expression -> and_expression  ;
and_expression -> equality_expression  ;
equality_expression -> relational_expression  ;
relational_expression -> shift_expression  ;
shift_expression -> additive_expression  ;
additive_expression -> additive_expression '+' multiplicative_expression  ;
multiplicative_expression -> unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> primary_expression  ;
primary_expression -> primary_expression_no_parenthesis  ;
primary_expression_no_parenthesis -> literal  ;
literal -> INTEGER_LITERAL  ;
additive_expression -> multiplicative_expression  ;
multiplicative_expression -> unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> qualified_identifier  ;
qualified_identifier -> IDENTIFIER  ;
assignment_operator -> '='  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> primary_expression  ;
primary_expression -> primary_expression_no_parenthesis  ;
primary_expression_no_parenthesis -> element_access  ;
element_access -> qualified_identifier LEFT_BRACKET expression_list RIGHT_BRACKET  ;
expression_list -> expression  ;
expression -> conditional_expression  ;
conditional_expression -> conditional_or_expression  ;
conditional_or_expression -> conditional_and_expression  ;
conditional_and_expression -> inclusive_or_expression  ;
inclusive_or_expression -> exclusive_or_expression  ;
exclusive_or_expression -> and_expression  ;
and_expression -> equality_expression  ;
equality_expression -> relational_expression  ;
relational_expression -> shift_expression  ;
shift_expression -> additive_expression  ;
additive_expression -> multiplicative_expression  ;
multiplicative_expression -> unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> qualified_identifier  ;
qualified_identifier -> IDENTIFIER  ;
qualified_identifier -> IDENTIFIER  ;
for_iterator_opt -> for_iterator  ;
for_iterator -> statement_expression_list  ;
statement_expression_list -> statement_expression  ;
statement_expression -> pre_increment_expression  ;
pre_increment_expression -> PLUSPLUS unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> qualified_identifier  ;
qualified_identifier -> IDENTIFIER  ;
for_condition_opt -> for_condition  ;
for_condition -> boolean_expression  ;
boolean_expression -> expression  ;
expression -> conditional_expression  ;
conditional_expression -> conditional_or_expression  ;
conditional_or_expression -> conditional_and_expression  ;
conditional_and_expression -> inclusive_or_expression  ;
inclusive_or_expression -> exclusive_or_expression  ;
exclusive_or_expression -> and_expression  ;
and_expression -> equality_expression  ;
equality_expression -> relational_expression  ;
relational_expression -> relational_expression '<' shift_expression  ;
shift_expression -> additive_expression  ;
additive_expression -> multiplicative_expression  ;
multiplicative_expression -> unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> primary_expression  ;
primary_expression -> primary_expression_no_parenthesis  ;
primary_expression_no_parenthesis -> literal  ;
literal -> INTEGER_LITERAL  ;
relational_expression -> shift_expression  ;
shift_expression -> additive_expression  ;
additive_expression -> multiplicative_expression  ;
multiplicative_expression -> unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> qualified_identifier  ;
qualified_identifier -> IDENTIFIER  ;
for_initializer_opt -> for_initializer  ;
for_initializer -> statement_expression_list  ;
statement_expression_list -> statement_expression  ;
statement_expression -> assignment  ;
assignment -> unary_expression assignment_operator expression  ;
expression -> conditional_expression  ;
conditional_expression -> conditional_or_expression  ;
conditional_or_expression -> conditional_and_expression  ;
conditional_and_expression -> inclusive_or_expression  ;
inclusive_or_expression -> exclusive_or_expression  ;
exclusive_or_expression -> and_expression  ;
and_expression -> equality_expression  ;
equality_expression -> relational_expression  ;
relational_expression -> shift_expression  ;
shift_expression -> additive_expression  ;
additive_expression -> multiplicative_expression  ;
multiplicative_expression -> unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> primary_expression  ;
primary_expression -> primary_expression_no_parenthesis  ;
primary_expression_no_parenthesis -> literal  ;
literal -> INTEGER_LITERAL  ;
assignment_operator -> '='  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> qualified_identifier  ;
qualified_identifier -> IDENTIFIER  ;
statement_list -> statement_list statement  ;
statement -> declaration_statement  ;
declaration_statement -> local_variable_declaration ';'  ;
local_variable_declaration -> type variable_declarators  ;
variable_declarators -> variable_declarator  ;
variable_declarator -> IDENTIFIER  ;
type -> non_array_type  ;
non_array_type -> simple_type  ;
simple_type -> primitive_type  ;
primitive_type -> numeric_type  ;
numeric_type -> integral_type  ;
integral_type -> INT_TYPE  ;
statement_list -> statement_list statement  ;
statement -> declaration_statement  ;
declaration_statement -> local_variable_declaration ';'  ;
local_variable_declaration -> type variable_declarators  ;
variable_declarators -> variable_declarators COMMA variable_declarator  ;
variable_declarator -> IDENTIFIER  ;
variable_declarators -> variable_declarator  ;
variable_declarator -> IDENTIFIER  ;
type -> non_array_type  ;
non_array_type -> simple_type  ;
simple_type -> primitive_type  ;
primitive_type -> numeric_type  ;
numeric_type -> integral_type  ;
integral_type -> INT_TYPE  ;
statement_list -> statement  ;
statement -> declaration_statement  ;
declaration_statement -> local_variable_declaration ';'  ;
local_variable_declaration -> type variable_declarators  ;
variable_declarators -> variable_declarator  ;
variable_declarator -> IDENTIFIER '=' variable_initializer  ;
variable_initializer -> expression  ;
expression -> conditional_expression  ;
conditional_expression -> conditional_or_expression  ;
conditional_or_expression -> conditional_and_expression  ;
conditional_and_expression -> inclusive_or_expression  ;
inclusive_or_expression -> exclusive_or_expression  ;
exclusive_or_expression -> and_expression  ;
and_expression -> equality_expression  ;
equality_expression -> relational_expression  ;
relational_expression -> shift_expression  ;
shift_expression -> additive_expression  ;
additive_expression -> multiplicative_expression  ;
multiplicative_expression -> unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> primary_expression  ;
primary_expression -> primary_expression_no_parenthesis  ;
primary_expression_no_parenthesis -> array_creation_expression  ;
array_creation_expression -> NEW non_array_type LEFT_BRACKET expression_list RIGHT_BRACKET rank_specifiers_opt array_initializer_opt  ;
array_initializer_opt -> eps  ;
eps ->   ;
rank_specifiers_opt -> eps  ;
eps ->   ;
expression_list -> expression  ;
expression -> conditional_expression  ;
conditional_expression -> conditional_or_expression  ;
conditional_or_expression -> conditional_and_expression  ;
conditional_and_expression -> inclusive_or_expression  ;
inclusive_or_expression -> exclusive_or_expression  ;
exclusive_or_expression -> and_expression  ;
and_expression -> equality_expression  ;
equality_expression -> relational_expression  ;
relational_expression -> shift_expression  ;
shift_expression -> additive_expression  ;
additive_expression -> multiplicative_expression  ;
multiplicative_expression -> unary_expression  ;
unary_expression -> unary_expression_not_plusminus  ;
unary_expression_not_plusminus -> postfix_expression  ;
postfix_expression -> primary_expression  ;
primary_expression -> primary_expression_no_parenthesis  ;
primary_expression_no_parenthesis -> literal  ;
literal -> INTEGER_LITERAL  ;
non_array_type -> simple_type  ;
simple_type -> primitive_type  ;
primitive_type -> numeric_type  ;
numeric_type -> integral_type  ;
integral_type -> INT_TYPE  ;
type -> array_type  ;
array_type -> simple_type rank_specifier  ;
rank_specifier -> RANK_SPECIFIER  ;
simple_type -> primitive_type  ;
primitive_type -> numeric_type  ;
numeric_type -> integral_type  ;
integral_type -> INT_TYPE  ;
method_header -> modifiers_opt VOID qualified_identifier '(' formal_parameter_list_opt ')'  ;
formal_parameter_list_opt -> formal_parameter_list  ;
formal_parameter_list -> formal_parameter  ;
formal_parameter -> fixed_parameter  ;
fixed_parameter -> parameter_modifier_opt type IDENTIFIER  ;
type -> array_type  ;
array_type -> simple_type rank_specifier  ;
rank_specifier -> RANK_SPECIFIER  ;
simple_type -> class_type  ;
class_type -> STRING_TYPE  ;
parameter_modifier_opt -> eps  ;
eps ->   ;
qualified_identifier -> IDENTIFIER  ;
modifiers_opt -> eps  ;
eps ->   ;
class_base_opt -> eps  ;
eps ->   ;
modifiers_opt -> eps  ;
eps ->   ;
using_directives_opt -> eps  ;
eps ->   ;
qualified_identifier -> IDENTIFIER  ;
using_directives_opt -> using_directives  ;
using_directives -> using_directive  ;
using_directive -> using_namespace_directive  ;
using_namespace_directive -> USING namespace_name ';'  ;
namespace_name -> qualified_identifier  ;
qualified_identifier -> IDENTIFIER  ;
